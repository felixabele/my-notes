{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-35371527e76efa8ccb7cb4e8a4444104620c31ae35e760dfb4575180b44bed29ff3065a0066e61b9c140d0dd445a0ca92de27850d0f626ca06264a54fc4ed7bc",
            "file": "src/app/safe-html.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Pipe({ name: 'safeHtml' })\nexport class SafeHtmlPipe implements PipeTransform {\n  constructor(private sanitized: DomSanitizer) {\n  }\n  transform(value: string) {\n    return this.sanitized.bypassSecurityTrustHtml(value);\n  }\n}"
        }
    ],
    "interfaces": [
        {
            "name": "Checklist",
            "id": "interface-Checklist-bc7df759a2833c0b397a191d1d6a65f19e7c001a376f44bc47901e5c978488aab80f57515e2e2aaa75d20bb3d0ad1aac1a0416d01d4ce86c7b1c9b2f2056faaf",
            "file": "src/app/widget/widget.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum WidgetTypes {\n  CHECKLIST = 'checklist',\n  RICH_TEXT = 'richText',\n  LINK = 'link',\n}\n\nexport interface ChecklistItem {\n  id?: string;\n  title: string;\n  done: boolean;\n}\n\nexport interface Checklist {\n  id: string;\n  type: WidgetTypes.CHECKLIST;\n  items: ChecklistItem[];\n}\n\nexport interface RichText {\n  id: string;\n  type: WidgetTypes.RICH_TEXT;\n  html: string;\n}\n\nexport interface Link {\n  id: string;\n  type: WidgetTypes.LINK;\n  url: string;\n  title?: string;\n}\n\nexport type Widget = (Checklist | RichText | Link)\nexport type Widgets = Widget[]\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChecklistItem[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WidgetTypes.CHECKLIST",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ChecklistItem",
            "id": "interface-ChecklistItem-bc7df759a2833c0b397a191d1d6a65f19e7c001a376f44bc47901e5c978488aab80f57515e2e2aaa75d20bb3d0ad1aac1a0416d01d4ce86c7b1c9b2f2056faaf",
            "file": "src/app/widget/widget.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum WidgetTypes {\n  CHECKLIST = 'checklist',\n  RICH_TEXT = 'richText',\n  LINK = 'link',\n}\n\nexport interface ChecklistItem {\n  id?: string;\n  title: string;\n  done: boolean;\n}\n\nexport interface Checklist {\n  id: string;\n  type: WidgetTypes.CHECKLIST;\n  items: ChecklistItem[];\n}\n\nexport interface RichText {\n  id: string;\n  type: WidgetTypes.RICH_TEXT;\n  html: string;\n}\n\nexport interface Link {\n  id: string;\n  type: WidgetTypes.LINK;\n  url: string;\n  title?: string;\n}\n\nexport type Widget = (Checklist | RichText | Link)\nexport type Widgets = Widget[]\n",
            "properties": [
                {
                    "name": "done",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExistingNote",
            "id": "interface-ExistingNote-ba625de9dbba6eb9833af44957f45b2a1b1ca581adf1ff9dace224a8ae651c15c0abb0b308d7fe2ac9ee4a6d095620eba6b1406ea84d28dd27c95af37519820e",
            "file": "src/app/note/note.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Widgets } from './../widget/widget';\nexport interface Note {\n  id?: string;\n  title: string;\n  description: string;\n  visible: boolean;\n  widgets?: Widgets;\n}\n\nexport interface ExistingNote {\n  id: string;\n  title: string;\n  description: string;\n  visible: boolean;\n  widgets?: Widgets;\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "widgets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Widgets",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Link",
            "id": "interface-Link-bc7df759a2833c0b397a191d1d6a65f19e7c001a376f44bc47901e5c978488aab80f57515e2e2aaa75d20bb3d0ad1aac1a0416d01d4ce86c7b1c9b2f2056faaf",
            "file": "src/app/widget/widget.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum WidgetTypes {\n  CHECKLIST = 'checklist',\n  RICH_TEXT = 'richText',\n  LINK = 'link',\n}\n\nexport interface ChecklistItem {\n  id?: string;\n  title: string;\n  done: boolean;\n}\n\nexport interface Checklist {\n  id: string;\n  type: WidgetTypes.CHECKLIST;\n  items: ChecklistItem[];\n}\n\nexport interface RichText {\n  id: string;\n  type: WidgetTypes.RICH_TEXT;\n  html: string;\n}\n\nexport interface Link {\n  id: string;\n  type: WidgetTypes.LINK;\n  url: string;\n  title?: string;\n}\n\nexport type Widget = (Checklist | RichText | Link)\nexport type Widgets = Widget[]\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WidgetTypes.LINK",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Note",
            "id": "interface-Note-ba625de9dbba6eb9833af44957f45b2a1b1ca581adf1ff9dace224a8ae651c15c0abb0b308d7fe2ac9ee4a6d095620eba6b1406ea84d28dd27c95af37519820e",
            "file": "src/app/note/note.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Widgets } from './../widget/widget';\nexport interface Note {\n  id?: string;\n  title: string;\n  description: string;\n  visible: boolean;\n  widgets?: Widgets;\n}\n\nexport interface ExistingNote {\n  id: string;\n  title: string;\n  description: string;\n  visible: boolean;\n  widgets?: Widgets;\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "widgets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Widgets",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NoteDialogData",
            "id": "interface-NoteDialogData-31d0642750a8f293c21821dee5594a57c1f9fc74176fa35d255b291807170aded1d6c8a6aae28e7f97522991db5aef59aff7659ac2eeedd1fa13c1f814954e40",
            "file": "src/app/note-dialog/note-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExistingNote } from './../note/note';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Note } from '../note/note';\n\nexport interface NoteDialogData {\n  note: Partial<Note>;\n  action: 'new' | 'edit';\n}\n\nexport interface NoteDialogResult {\n  note: ExistingNote;\n  delete?: boolean;\n}\n\n@Component({\n  selector: 'app-note-dialog',\n  template: `\n    <mat-form-field>\n      <mat-label>Title</mat-label>\n      <input matInput cdkFocusInitial [(ngModel)]=\"data.note.title\" />\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Description</mat-label>\n      <textarea matInput [(ngModel)]=\"data.note.description\"></textarea>\n    </mat-form-field>\n\n    <div mat-dialog-actions>\n      <button mat-button [mat-dialog-close]=\"{ note: data.note }\">OK</button>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button\n        *ngIf=\"data.action === 'edit'\"\n        mat-fab\n        color=\"primary\"\n        aria-label=\"Delete\"\n        [mat-dialog-close]=\"{ task: data.note, delete: true }\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  `,\n  styles: [\n  ]\n})\nexport class NoteDialogComponent {\n  backupNote: Partial<Note> = { ...this.data.note };\n\n  constructor(\n    public dialogRef: MatDialogRef<NoteDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: NoteDialogData\n  ) { }\n\n  cancel(): void {\n    this.data.note.title = this.backupNote.title;\n    this.data.note.description = this.backupNote.description;\n    this.dialogRef.close(this.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"new\" | \"edit\"",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Note>",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NoteDialogResult",
            "id": "interface-NoteDialogResult-31d0642750a8f293c21821dee5594a57c1f9fc74176fa35d255b291807170aded1d6c8a6aae28e7f97522991db5aef59aff7659ac2eeedd1fa13c1f814954e40",
            "file": "src/app/note-dialog/note-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExistingNote } from './../note/note';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Note } from '../note/note';\n\nexport interface NoteDialogData {\n  note: Partial<Note>;\n  action: 'new' | 'edit';\n}\n\nexport interface NoteDialogResult {\n  note: ExistingNote;\n  delete?: boolean;\n}\n\n@Component({\n  selector: 'app-note-dialog',\n  template: `\n    <mat-form-field>\n      <mat-label>Title</mat-label>\n      <input matInput cdkFocusInitial [(ngModel)]=\"data.note.title\" />\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Description</mat-label>\n      <textarea matInput [(ngModel)]=\"data.note.description\"></textarea>\n    </mat-form-field>\n\n    <div mat-dialog-actions>\n      <button mat-button [mat-dialog-close]=\"{ note: data.note }\">OK</button>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button\n        *ngIf=\"data.action === 'edit'\"\n        mat-fab\n        color=\"primary\"\n        aria-label=\"Delete\"\n        [mat-dialog-close]=\"{ task: data.note, delete: true }\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  `,\n  styles: [\n  ]\n})\nexport class NoteDialogComponent {\n  backupNote: Partial<Note> = { ...this.data.note };\n\n  constructor(\n    public dialogRef: MatDialogRef<NoteDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: NoteDialogData\n  ) { }\n\n  cancel(): void {\n    this.data.note.title = this.backupNote.title;\n    this.data.note.description = this.backupNote.description;\n    this.dialogRef.close(this.data);\n  }\n}\n",
            "properties": [
                {
                    "name": "delete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExistingNote",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RichText",
            "id": "interface-RichText-bc7df759a2833c0b397a191d1d6a65f19e7c001a376f44bc47901e5c978488aab80f57515e2e2aaa75d20bb3d0ad1aac1a0416d01d4ce86c7b1c9b2f2056faaf",
            "file": "src/app/widget/widget.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum WidgetTypes {\n  CHECKLIST = 'checklist',\n  RICH_TEXT = 'richText',\n  LINK = 'link',\n}\n\nexport interface ChecklistItem {\n  id?: string;\n  title: string;\n  done: boolean;\n}\n\nexport interface Checklist {\n  id: string;\n  type: WidgetTypes.CHECKLIST;\n  items: ChecklistItem[];\n}\n\nexport interface RichText {\n  id: string;\n  type: WidgetTypes.RICH_TEXT;\n  html: string;\n}\n\nexport interface Link {\n  id: string;\n  type: WidgetTypes.LINK;\n  url: string;\n  title?: string;\n}\n\nexport type Widget = (Checklist | RichText | Link)\nexport type Widgets = Widget[]\n",
            "properties": [
                {
                    "name": "html",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WidgetTypes.RICH_TEXT",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "NotesService",
            "id": "injectable-NotesService-777055b836a40952f6d9ac24b4d61c9c625f926fe68037a0ac0558b678aebf6230c902bdfa5f5b2d65dddb82cc1a0bf8ac9aebca05a1669e4979079d2aec4dcb",
            "file": "src/app/notes.service.ts",
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Firestore",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dbName",
                    "defaultValue": "'notes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "notesCol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionReference<DocumentData>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "obsr_UpdatedSnapshot",
                    "defaultValue": "this.updatedSnapshot.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "updatedSnapshot",
                    "defaultValue": "new Subject<QuerySnapshot<DocumentData>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNote",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "docId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "docId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "updateNote",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "visible",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateWidgets",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "widgets",
                            "type": "Widgets",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "widgets",
                            "type": "Widgets",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Widgets } from './widget/widget';\nimport { Injectable } from '@angular/core';\nimport { initializeApp } from 'firebase/app';\nimport { Firestore, getFirestore, collection, addDoc, getDocs, deleteDoc, doc, updateDoc, DocumentData, CollectionReference, onSnapshot, QuerySnapshot } from 'firebase/firestore'\nimport { Subject } from 'rxjs';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesService {\n  db: Firestore;\n  notesCol: CollectionReference<DocumentData>;\n  private updatedSnapshot = new Subject<QuerySnapshot<DocumentData>>();\n  protected dbName = 'notes';\n  obsr_UpdatedSnapshot = this.updatedSnapshot.asObservable();\n\n  constructor() {\n    initializeApp(environment.firebase);\n    this.db = getFirestore();\n    this.notesCol = collection(this.db, this.dbName);\n\n    // Get Realtime Data\n    onSnapshot(this.notesCol, (snapshot) => {\n      this.updatedSnapshot.next(snapshot);\n    }, (err) => {\n      console.log(err);\n    })\n  }\n\n  async getNotes() {\n    const snapshot = await getDocs(this.notesCol);\n    return snapshot;\n  }\n\n  async addNote(title: string, description: string) {\n    await addDoc(this.notesCol, {\n      title,\n      description,\n      visible: true,\n    })\n    return;\n  }\n\n  async deleteNote(docId: string) {\n    const docRef = doc(this.db, this.dbName, docId)\n    await deleteDoc(docRef);\n    return;\n  }\n\n  async updateNote(id: string, title?: string, description?: string, visible?: boolean) {\n    const docRef = doc(this.db, this.dbName, id);\n    await updateDoc(docRef, { title, description, visible })\n    return;\n  }\n\n  async updateWidgets(id: string, widgets: Widgets) {\n    const docRef = doc(this.db, this.dbName, id);\n    await updateDoc(docRef, { widgets })\n    return;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-adcc8d61599350cdcd7a0fd5c23352c334c69a6fa0bfbf323c774ffe9d5d5671ee2e06d6ec75d217e77c2733ac68b640ddc1db102d4aa3db411fc6bc52ffe93d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Note[] | any",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "editNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "Note",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "Note",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "newNote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateNoteCollection",
                    "args": [
                        {
                            "name": "snapshot",
                            "type": "QuerySnapshot<DocumentData>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshot",
                            "type": "QuerySnapshot<DocumentData>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NotesService } from './notes.service';\nimport { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DocumentData, QuerySnapshot } from '@angular/fire/firestore';\n\nimport { Note, ExistingNote } from './note/note';\nimport { NoteDialogComponent, NoteDialogResult } from './note-dialog/note-dialog.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  notes: Note[] | any = [];\n\n  constructor(\n    private dialog: MatDialog,\n    private notesService: NotesService,\n  ) { }\n\n  ngOnInit(): void {\n    this.get();\n    this.notesService.obsr_UpdatedSnapshot.subscribe((snapshot) => {\n      this.updateNoteCollection(snapshot);\n    })\n  }\n\n  async get() {\n    const snapshot = await this.notesService.getNotes();\n    this.updateNoteCollection(snapshot);\n  }\n\n  updateNoteCollection(snapshot: QuerySnapshot<DocumentData>) {\n    this.notes = [];\n    snapshot.docs.forEach((note) => {\n      this.notes.push({ ...note.data(), id: note.id });\n    })\n  }\n\n  newNote(): void {\n    const dialogRef = this.dialog.open(NoteDialogComponent, {\n      width: '270px',\n      data: {\n        note: {},\n        action: 'new',\n      },\n    });\n\n    dialogRef\n      .afterClosed()\n      .subscribe((result: NoteDialogResult | undefined | null) => {\n        if (!result || !result.note?.title) {\n          return;\n        }\n        const note: Note = result.note;\n        this.notesService.addNote(note.title, note.description);\n      });\n  }\n\n  editNote(note: Note): void {\n    const dialogRef = this.dialog.open(NoteDialogComponent, {\n      width: '270px',\n      data: {\n        note,\n        action: 'edit',\n      },\n    });\n\n    dialogRef\n      .afterClosed()\n      .subscribe((result: NoteDialogResult | undefined) => {\n        if (!result) {\n          return;\n        }\n        const note: ExistingNote = result.note;\n        if (result.delete) {\n          this.notesService.deleteNote(note.id);\n        } else {\n          this.notesService.updateNote(note.id, note.title, note.description);\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  padding: 1rem;\n  background: lightgray;\n}\n\n.mat-toolbar .mat-icon {\n  margin-right: 1rem;\n}",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notesService",
                        "type": "NotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notesService",
                        "type": "NotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\">\n  <mat-icon>task_alt</mat-icon>\n  <span>MyTasks</span>\n</mat-toolbar>\n\n<section>\n  <app-note *ngFor=\"let note of notes\" [note]=\"note\" (edit)=\"editNote($event)\"></app-note>\n</section>\n\n<div class=\"content-wrapper\">\n  <button (click)=\"newNote()\" mat-button>\n    <mat-icon>add</mat-icon> Add Task\n  </button>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-3dca2431971c53aa81a5b441d9bd41ac91c9b62537f3f96f8684ddbf238e292d5110c94bf22f597cb84580d290528d2b2c883ab2a44a9b9c30eff6f1b52e4d37",
            "file": "src/app/widget/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [],
            "styles": [
                ".checklist-item { display: flex; justify-content: space-between; }",
                ".checklist-item:hover input { font-weight: bold; }",
                ".checklist-item__done input { text-decoration: line-through; color: grey; }",
                ".mat-checkbox { margin-right: 1rem; }",
                ".mat-icon { font-size: 18px; line-height: 18px; cursor: pointer; }",
                ".title-input { border: 0; outline: none }"
            ],
            "template": "<div class=\"checklist-item\" [ngClass]=\"{ 'checklist-item__done': item.done }\">\n  <span>\n    <mat-checkbox [(ngModel)]=\"done\" (change)=\"onChange()\"></mat-checkbox>\n    <input type=\"text\" [(ngModel)]=\"title\" class=\"title-input\" (blur)=\"onStopEditing()\" />\n  </span>\n  <mat-icon (click)=\"onDelete()\" class=\"checklist-item__delete-button\">close</mat-icon>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ChecklistItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<ChecklistItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter<ChecklistItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "done",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "origTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onStopEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChecklistItem } from './../widget';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-checkbox',\n  template: `\n    <div class=\"checklist-item\" [ngClass]=\"{ 'checklist-item__done': item.done }\">\n      <span>\n        <mat-checkbox [(ngModel)]=\"done\" (change)=\"onChange()\"></mat-checkbox>\n        <input type=\"text\" [(ngModel)]=\"title\" class=\"title-input\" (blur)=\"onStopEditing()\" />\n      </span>\n      <mat-icon (click)=\"onDelete()\" class=\"checklist-item__delete-button\">close</mat-icon>\n    </div>\n  `,\n  styles: [\n    '.checklist-item { display: flex; justify-content: space-between; }',\n    '.checklist-item:hover input { font-weight: bold; }',\n    '.checklist-item__done input { text-decoration: line-through; color: grey; }',\n    '.mat-checkbox { margin-right: 1rem; }',\n    '.mat-icon { font-size: 18px; line-height: 18px; cursor: pointer; }',\n    '.title-input { border: 0; outline: none }',\n  ]\n})\nexport class CheckboxComponent implements OnInit {\n  @Input() item!: ChecklistItem;\n  @Output() update = new EventEmitter<ChecklistItem>();\n  @Output() delete = new EventEmitter<ChecklistItem>();\n\n  done: boolean = false;\n  title: string = '';\n  origTitle: string = '';\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.done = !!this.item.done;\n    this.title = this.item.title;\n    this.origTitle = this.item.title;\n  }\n\n  onChange(): void {\n    this.update.emit({ ...this.item, done: this.done });\n  }\n\n  onDelete(): void {\n    this.delete.emit(this.item);\n  }\n\n  onStopEditing(): void {\n    if (this.origTitle !== this.title) {\n      this.update.emit({ ...this.item, title: this.title });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".checklist-item { display: flex; justify-content: space-between; }\n.checklist-item:hover input { font-weight: bold; }\n.checklist-item__done input { text-decoration: line-through; color: grey; }\n.mat-checkbox { margin-right: 1rem; }\n.mat-icon { font-size: 18px; line-height: 18px; cursor: pointer; }\n.title-input { border: 0; outline: none }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ChecklistComponent",
            "id": "component-ChecklistComponent-942ad41ddf5ef2245434ad96131a626b40ea676f632638861b52f09e042ecff94ee7067a63a468ad3a5ddc7cac2854c5effaa4e01a79b20110b13556cd17de9b",
            "file": "src/app/widget/checklist/checklist.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checklist",
            "styleUrls": [],
            "styles": [
                ".buttons { display: flex; justify-content: flex-end; margin-top: 1rem; }",
                ".buttons app-icon-link { margin-left: 1rem; }"
            ],
            "template": "<div *ngFor=\"let item of pendingItems\">\n  <app-checkbox\n    [item]=\"item\"\n    (update)=\"onUpdateChecklist($event)\"\n    (delete)=\"onDeleteChecklistItem($event)\"\n    (keydown.enter)=\"onAdd()\"\n  ></app-checkbox>\n</div>\n\n<div *ngFor=\"let item of doneItems\" class=\"done-items-list\">\n  <app-checkbox\n    [item]=\"item\"\n    (update)=\"onUpdateChecklist($event)\"\n    (delete)=\"onDeleteChecklistItem($event)\"\n  ></app-checkbox>\n</div>\n\n<div class=\"buttons\">\n  <app-icon-link (click)=\"onAdd()\" icon=\"add\">\n    Add Item\n  </app-icon-link>\n\n  <app-icon-link (click)=\"onDeleteChecklist()\" icon=\"delete\">\n    Delete List\n  </app-icon-link>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checklist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Checklist",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteChecklist",
                    "defaultValue": "new EventEmitter<Checklist>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                },
                {
                    "name": "updateChecklist",
                    "defaultValue": "new EventEmitter<Checklist>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteChecklist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteChecklistItem",
                    "args": [
                        {
                            "name": "checklistItem",
                            "type": "ChecklistItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checklistItem",
                            "type": "ChecklistItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdateChecklist",
                    "args": [
                        {
                            "name": "checklistItem",
                            "type": "ChecklistItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checklistItem",
                            "type": "ChecklistItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Checklist, ChecklistItem } from './../widget';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { uuidv4 } from '@firebase/util';\n\n@Component({\n  selector: 'app-checklist',\n  template: `\n    <div *ngFor=\"let item of pendingItems\">\n      <app-checkbox\n        [item]=\"item\"\n        (update)=\"onUpdateChecklist($event)\"\n        (delete)=\"onDeleteChecklistItem($event)\"\n        (keydown.enter)=\"onAdd()\"\n      ></app-checkbox>\n    </div>\n\n    <div *ngFor=\"let item of doneItems\" class=\"done-items-list\">\n      <app-checkbox\n        [item]=\"item\"\n        (update)=\"onUpdateChecklist($event)\"\n        (delete)=\"onDeleteChecklistItem($event)\"\n      ></app-checkbox>\n    </div>\n\n    <div class=\"buttons\">\n      <app-icon-link (click)=\"onAdd()\" icon=\"add\">\n        Add Item\n      </app-icon-link>\n\n      <app-icon-link (click)=\"onDeleteChecklist()\" icon=\"delete\">\n        Delete List\n      </app-icon-link>\n    </div>\n  `,\n  styles: [\n    '.buttons { display: flex; justify-content: flex-end; margin-top: 1rem; }',\n    '.buttons app-icon-link { margin-left: 1rem; }',\n  ],\n})\nexport class ChecklistComponent {\n  @Input() checklist!: Checklist;\n  @Output() updateChecklist = new EventEmitter<Checklist>();\n  @Output() deleteChecklist = new EventEmitter<Checklist>();\n\n  get doneItems(): ChecklistItem[] {\n    return this.checklist.items.filter(({ done }) => done);\n  }\n\n  get pendingItems(): ChecklistItem[] {\n    return this.checklist.items.filter(({ done }) => !done);\n  }\n\n  onUpdateChecklist(checklistItem: ChecklistItem): void {\n    const updatedChecklistItems:ChecklistItem[] = this.checklist.items.map((item) => (\n      item.id === checklistItem.id ? checklistItem : item\n    ));\n\n    this.updateChecklist.emit({ ...this.checklist, items: updatedChecklistItems })\n  }\n\n  onDeleteChecklist(): void {\n    this.deleteChecklist.emit(this.checklist);\n  }\n\n  onDeleteChecklistItem(checklistItem: ChecklistItem): void {\n    const updatedChecklistItems: ChecklistItem[] = this.checklist.items.filter((item) => (\n      item.id !== checklistItem.id\n    ));\n\n    this.updateChecklist.emit({ ...this.checklist, items: updatedChecklistItems })\n  }\n\n  onAdd(): void {\n    const newChecklistItem: ChecklistItem = {\n      id: uuidv4(),\n      title: 'New todo',\n      done: false,\n    };\n    this.checklist.items.push(newChecklistItem);\n    this.updateChecklist.emit(this.checklist);\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".buttons { display: flex; justify-content: flex-end; margin-top: 1rem; }\n.buttons app-icon-link { margin-left: 1rem; }\n",
            "accessors": {
                "doneItems": {
                    "name": "doneItems",
                    "getSignature": {
                        "name": "doneItems",
                        "type": "[]",
                        "returnType": "ChecklistItem[]",
                        "line": 45
                    }
                },
                "pendingItems": {
                    "name": "pendingItems",
                    "getSignature": {
                        "name": "pendingItems",
                        "type": "[]",
                        "returnType": "ChecklistItem[]",
                        "line": 49
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "IconLinkComponent",
            "id": "component-IconLinkComponent-21e428506bcda50f19f7059c63f2baf76892a1d0a23172b1300e02de477a87b52c2b45a924502178f6df95754298952fc32c4814d9ee907a76b9ba4875d8600b",
            "file": "src/app/icon-link/icon-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon-link",
            "styleUrls": [],
            "styles": [
                ".icon-link { cursor: pointer; text-decoration: underline }",
                ".icon-link:hover { font-weight: bold; }",
                ".link-button__container { display: flex; }",
                ".link-button__content { padding: 3px 0 0 4px; }"
            ],
            "template": "<a class=\"icon-link\">\n  <span class=\"link-button__container\">\n    <mat-icon>{{icon}}</mat-icon>\n    <span class=\"link-button__content\">\n      <ng-content></ng-content>\n    </span>\n  </span>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-icon-link',\n  template: `\n    <a class=\"icon-link\">\n      <span class=\"link-button__container\">\n        <mat-icon>{{icon}}</mat-icon>\n        <span class=\"link-button__content\">\n          <ng-content></ng-content>\n        </span>\n      </span>\n    </a>\n  `,\n  styles: [\n    '.icon-link { cursor: pointer; text-decoration: underline }',\n    '.icon-link:hover { font-weight: bold; }',\n    '.link-button__container { display: flex; }',\n    '.link-button__content { padding: 3px 0 0 4px; }',\n  ]\n})\nexport class IconLinkComponent {\n  @Input() icon!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".icon-link { cursor: pointer; text-decoration: underline }\n.icon-link:hover { font-weight: bold; }\n.link-button__container { display: flex; }\n.link-button__content { padding: 3px 0 0 4px; }\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-86d6de43c64d80ed4e93cb4f67df586ae26fbc5a1bb34e241992fab1732dd56faa6d419fb4d360e5f6ca93f857b7befde2c51cf2f2594244785218a9b649b370",
            "file": "src/app/widget/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-link",
            "styleUrls": [],
            "styles": [
                ".link-widget { display: flex; justify-content: space-between; }"
            ],
            "template": "<div class=\"link-widget\">\n  <div class=\"link-input\">\n    <mat-form-field [class.cdk-visually-hidden]=\"!editing\">\n      <input\n        matInput\n        #linkInput=\"matInput\"\n        type=\"text\"\n        [(ngModel)]=\"urlModel\"\n        (blur)=\"onStopEditing()\"\n      />\n    </mat-form-field>\n\n    <span [hidden]=\"editing\">\n      {{ link.title }} {{ link.url }}\n      <mat-icon (click)=\"onStartEditing()\">edit</mat-icon>\n    </span>\n  </div>\n  <mat-icon (click)=\"onDelete()\">close</mat-icon>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "Link",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteLink",
                    "defaultValue": "new EventEmitter<Link>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "updateLink",
                    "defaultValue": "new EventEmitter<Link>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "editing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "linkInputField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatInput | undefined",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'linkInput'"
                        }
                    ]
                },
                {
                    "name": "urlModel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onStartEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onStopEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseLink",
                    "args": [
                        {
                            "name": "linkString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Link",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "linkString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stringifyLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "Link",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "Link",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { MatInput } from '@angular/material/input';\nimport { Link } from '../widget';\n\n@Component({\n  selector: 'app-link',\n  template: `\n    <div class=\"link-widget\">\n      <div class=\"link-input\">\n        <mat-form-field [class.cdk-visually-hidden]=\"!editing\">\n          <input\n            matInput\n            #linkInput=\"matInput\"\n            type=\"text\"\n            [(ngModel)]=\"urlModel\"\n            (blur)=\"onStopEditing()\"\n          />\n        </mat-form-field>\n\n        <span [hidden]=\"editing\">\n          {{ link.title }} {{ link.url }}\n          <mat-icon (click)=\"onStartEditing()\">edit</mat-icon>\n        </span>\n      </div>\n      <mat-icon (click)=\"onDelete()\">close</mat-icon>\n    </div>\n  `,\n  styles: [\n    '.link-widget { display: flex; justify-content: space-between; }',\n  ]\n})\nexport class LinkComponent implements OnInit {\n  @Input() link!: Link;\n  @Output() deleteLink = new EventEmitter<Link>();\n  @Output() updateLink = new EventEmitter<Link>();\n  @ViewChild('linkInput') linkInputField: MatInput | undefined;\n\n  editing: boolean = false;\n  urlModel: string = '';\n\n  stringifyLink(link: Link): string {\n    return link.title ? `${link.title}|${link.url}` : link.url;\n  }\n\n  parseLink(linkString: string): Link {\n    if (linkString.includes('|http')) {\n      const splitLinkString = linkString.split(/(.*)\\|(http.*)/);\n      return {\n        ...this.link, url: splitLinkString[2], title: splitLinkString[1]\n      };\n    }\n\n    return {\n      ...this.link, url: linkString, title: ''\n    };\n  }\n\n  ngOnInit(): void {\n    this.urlModel = this.stringifyLink(this.link);\n  }\n\n  onDelete(): void {\n    this.deleteLink.emit(this.link);\n  }\n\n  onStartEditing(): void {\n    this.editing = true;\n    this.linkInputField?.focus()\n  }\n\n  onStopEditing(): void {\n    this.editing = false;\n    const unchanged = this.urlModel === this.stringifyLink(this.link);\n\n    if (unchanged) {\n      return;\n    }\n\n    this.updateLink.emit(this.parseLink(this.urlModel));\n    console.log(\"changed\", this.urlModel);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".link-widget { display: flex; justify-content: space-between; }\n",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "NoteComponent",
            "id": "component-NoteComponent-82fdf6a8caee02f880cb4329b430d70cef8b4d3a1fafd67aed4f7fc6071171cc90a69390bffc7b639afd4b350a4f8ffe734405c81f77b283300c282798235066",
            "file": "src/app/note/note.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-note",
            "styleUrls": [],
            "styles": [
                ".note-title { display: flex; }",
                ".note-title__spacer { flex: 1 1 auto; }",
                ".visible .icon-hidden { display: none }",
                ".visible .icon-visible { display: inline }",
                ".hidden .icon-hidden { display: inline }",
                ".hidden .icon-visible { display: none }",
                ".hidden mat-card-content { display: none }",
                "a { cursor: pointer; }",
                ".mat-card-title { margin-bottom: 0 }"
            ],
            "template": "<mat-card\n  class=\"item\"\n  *ngIf=\"note\"\n  [ngClass]=\"{ visible: note.visible, hidden: !note.visible }\"\n>\n  <mat-card-title class=\"note-title\">\n    <span>{{ note.title }}</span>\n    <span class=\"note-title__spacer\"></span>\n    <app-note-menu\n      class=\"item__menu\"\n      (addWidget)=\"onAddWidget($event)\"\n      (edit)=\"edit.emit(note)\"\n    ></app-note-menu>\n    <a (click)=\"onToggleVisibility()\">\n      <mat-icon class=\"icon-visible\">visibility</mat-icon>\n      <mat-icon class=\"icon-hidden\">visibility_off</mat-icon>\n    </a>\n  </mat-card-title>\n  <mat-card-content>\n    {{ note.description }}\n    <app-widget *ngFor=\"let widget of note.widgets\" [widget]=\"widget\" [note]=\"note\">\n    </app-widget>\n  </mat-card-content>\n</mat-card>\n<br />\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "ExistingNote",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter<Note>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onAddWidget",
                    "args": [
                        {
                            "name": "widget",
                            "type": "Widget",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "widget",
                            "type": "Widget",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToggleVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NotesService } from './../notes.service';\nimport { Widget, Widgets } from './../widget/widget';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Note, ExistingNote } from './note';\n\n@Component({\n  selector: 'app-note',\n  template: `\n    <mat-card\n      class=\"item\"\n      *ngIf=\"note\"\n      [ngClass]=\"{ visible: note.visible, hidden: !note.visible }\"\n    >\n      <mat-card-title class=\"note-title\">\n        <span>{{ note.title }}</span>\n        <span class=\"note-title__spacer\"></span>\n        <app-note-menu\n          class=\"item__menu\"\n          (addWidget)=\"onAddWidget($event)\"\n          (edit)=\"edit.emit(note)\"\n        ></app-note-menu>\n        <a (click)=\"onToggleVisibility()\">\n          <mat-icon class=\"icon-visible\">visibility</mat-icon>\n          <mat-icon class=\"icon-hidden\">visibility_off</mat-icon>\n        </a>\n      </mat-card-title>\n      <mat-card-content>\n        {{ note.description }}\n        <app-widget *ngFor=\"let widget of note.widgets\" [widget]=\"widget\" [note]=\"note\">\n        </app-widget>\n      </mat-card-content>\n    </mat-card>\n    <br />\n  `,\n  styles: [\n    '.note-title { display: flex; }',\n    '.note-title__spacer { flex: 1 1 auto; }',\n    '.visible .icon-hidden { display: none }',\n    '.visible .icon-visible { display: inline }',\n    '.hidden .icon-hidden { display: inline }',\n    '.hidden .icon-visible { display: none }',\n    '.hidden mat-card-content { display: none }',\n    'a { cursor: pointer; }',\n    '.mat-card-title { margin-bottom: 0 }',\n  ]\n})\nexport class NoteComponent {\n  @Input() note!: ExistingNote;\n  @Output() edit = new EventEmitter<Note>();\n\n  constructor(private notesService: NotesService) {}\n\n  onAddWidget(widget: Widget): void {\n    if (!this.note || !this.note.id) {\n      return;\n    }\n    const widgets: Widgets | [] = this.note.widgets || [];\n    widgets.push(widget);\n    this.notesService.updateWidgets(this.note.id, widgets);\n  }\n\n  onToggleVisibility(): void {\n    const { id, title, description, visible } = this.note;\n    this.notesService.updateNote(id, title, description, !visible);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".note-title { display: flex; }\n.note-title__spacer { flex: 1 1 auto; }\n.visible .icon-hidden { display: none }\n.visible .icon-visible { display: inline }\n.hidden .icon-hidden { display: inline }\n.hidden .icon-visible { display: none }\n.hidden mat-card-content { display: none }\na { cursor: pointer; }\n.mat-card-title { margin-bottom: 0 }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notesService",
                        "type": "NotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "notesService",
                        "type": "NotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NoteDialogComponent",
            "id": "component-NoteDialogComponent-31d0642750a8f293c21821dee5594a57c1f9fc74176fa35d255b291807170aded1d6c8a6aae28e7f97522991db5aef59aff7659ac2eeedd1fa13c1f814954e40",
            "file": "src/app/note-dialog/note-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-note-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field>\n  <mat-label>Title</mat-label>\n  <input matInput cdkFocusInitial [(ngModel)]=\"data.note.title\" />\n</mat-form-field>\n\n<mat-form-field>\n  <mat-label>Description</mat-label>\n  <textarea matInput [(ngModel)]=\"data.note.description\"></textarea>\n</mat-form-field>\n\n<div mat-dialog-actions>\n  <button mat-button [mat-dialog-close]=\"{ note: data.note }\">OK</button>\n  <button mat-button (click)=\"cancel()\">Cancel</button>\n  <button\n    *ngIf=\"data.action === 'edit'\"\n    mat-fab\n    color=\"primary\"\n    aria-label=\"Delete\"\n    [mat-dialog-close]=\"{ task: data.note, delete: true }\">\n    <mat-icon>delete</mat-icon>\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backupNote",
                    "defaultValue": "{ ...this.data.note }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Note>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NoteDialogData",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<NoteDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ExistingNote } from './../note/note';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Note } from '../note/note';\n\nexport interface NoteDialogData {\n  note: Partial<Note>;\n  action: 'new' | 'edit';\n}\n\nexport interface NoteDialogResult {\n  note: ExistingNote;\n  delete?: boolean;\n}\n\n@Component({\n  selector: 'app-note-dialog',\n  template: `\n    <mat-form-field>\n      <mat-label>Title</mat-label>\n      <input matInput cdkFocusInitial [(ngModel)]=\"data.note.title\" />\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Description</mat-label>\n      <textarea matInput [(ngModel)]=\"data.note.description\"></textarea>\n    </mat-form-field>\n\n    <div mat-dialog-actions>\n      <button mat-button [mat-dialog-close]=\"{ note: data.note }\">OK</button>\n      <button mat-button (click)=\"cancel()\">Cancel</button>\n      <button\n        *ngIf=\"data.action === 'edit'\"\n        mat-fab\n        color=\"primary\"\n        aria-label=\"Delete\"\n        [mat-dialog-close]=\"{ task: data.note, delete: true }\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  `,\n  styles: [\n  ]\n})\nexport class NoteDialogComponent {\n  backupNote: Partial<Note> = { ...this.data.note };\n\n  constructor(\n    public dialogRef: MatDialogRef<NoteDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: NoteDialogData\n  ) { }\n\n  cancel(): void {\n    this.data.note.title = this.backupNote.title;\n    this.data.note.description = this.backupNote.description;\n    this.dialogRef.close(this.data);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<NoteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "NoteDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<NoteDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "NoteDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NoteMenuComponent",
            "id": "component-NoteMenuComponent-bcae70d9f6ba6129ddb4e004b0f6585e2c909aa8f86987b1aa0388087fcfdccb9dbc79a8d0108739d14aa8277294e459d5ef7967a806d44dbcd70e696c4cb998",
            "file": "src/app/note-menu/note-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-note-menu",
            "styleUrls": [],
            "styles": [
                "a { cursor: pointer; margin-right: 1rem; }"
            ],
            "template": "<a [matMenuTriggerFor]=\"menu\">\n  <mat-icon>more_vert</mat-icon>\n</a>\n<mat-menu #menu=\"matMenu\">\n  <button (click)=\"edit.emit()\" mat-menu-item>\n    <mat-icon>edit</mat-icon>\n    <span>Edit</span>\n  </button>\n  <button (click)=\"onAddChecklist()\" mat-menu-item>\n    <mat-icon>check-box</mat-icon>\n    <span>Add Checklist</span>\n  </button>\n  <button (click)=\"onAddRichText()\" mat-menu-item>\n    <mat-icon>edit_note</mat-icon>\n    <span>Add Text</span>\n  </button>\n  <button (click)=\"onAddLink()\" mat-menu-item>\n    <mat-icon>link</mat-icon>\n    <span>Add Link</span>\n  </button>\n</mat-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "addWidget",
                    "defaultValue": "new EventEmitter<Widget>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter<Checklist>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onAddChecklist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddRichText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { v4 as uuidv4 } from 'uuid';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { Checklist, ChecklistItem, Link, RichText, Widget, WidgetTypes } from '../widget/widget';\n\n@Component({\n  selector: 'app-note-menu',\n  template: `\n    <a [matMenuTriggerFor]=\"menu\">\n      <mat-icon>more_vert</mat-icon>\n    </a>\n    <mat-menu #menu=\"matMenu\">\n      <button (click)=\"edit.emit()\" mat-menu-item>\n        <mat-icon>edit</mat-icon>\n        <span>Edit</span>\n      </button>\n      <button (click)=\"onAddChecklist()\" mat-menu-item>\n        <mat-icon>check-box</mat-icon>\n        <span>Add Checklist</span>\n      </button>\n      <button (click)=\"onAddRichText()\" mat-menu-item>\n        <mat-icon>edit_note</mat-icon>\n        <span>Add Text</span>\n      </button>\n      <button (click)=\"onAddLink()\" mat-menu-item>\n        <mat-icon>link</mat-icon>\n        <span>Add Link</span>\n      </button>\n    </mat-menu>\n  `,\n  styles: [\n    'a { cursor: pointer; margin-right: 1rem; }',\n  ]\n})\nexport class NoteMenuComponent {\n  @Output() addWidget = new EventEmitter<Widget>();\n  @Output() edit = new EventEmitter<Checklist>();\n\n  onAddChecklist(): void {\n    const sampleChecklistItem: ChecklistItem = {\n      id: uuidv4(),\n      title: 'do it',\n      done: false,\n    };\n    const sampleChecklist: Checklist = {\n      id: uuidv4(),\n      type: WidgetTypes.CHECKLIST,\n      items: [sampleChecklistItem],\n    };\n\n    this.addWidget.emit(sampleChecklist);\n  }\n\n  onAddRichText(): void {\n    const sampleRichText: RichText = {\n      id: uuidv4(),\n      type: WidgetTypes.RICH_TEXT,\n      html: '<p>Hello world!</p>',\n    };\n\n    this.addWidget.emit(sampleRichText);\n  }\n\n    onAddLink(): void {\n    const sampleLink: Link = {\n      id: uuidv4(),\n      type: WidgetTypes.LINK,\n      title: '',\n      url: '',\n    };\n\n    this.addWidget.emit(sampleLink);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "a { cursor: pointer; margin-right: 1rem; }\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RichTextComponent",
            "id": "component-RichTextComponent-8e62aaacbeb49b95184936b885c96aef5178b7e6231141347e81cfb3c24aaf04e0d7ceaa73d46f1b91867768d8428504a185e84cf2837e34e4c884fc70017829",
            "file": "src/app/widget/rich-text/rich-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rich-text",
            "styleUrls": [],
            "styles": [
                ".buttons { display: flex; justify-content: flex-end; margin-top: 1rem; }"
            ],
            "template": "<div class=\"richt-text-widget\" *ngIf=\"editor\">\n  <form [formGroup]=\"form\" *ngIf=\"active\">\n    <ngx-editor-menu\n     [editor]=\"editor\"\n     [toolbar] = \"toolbar\"\n    ></ngx-editor-menu>\n    <ngx-editor\n      [editor]=\"editor\"\n      (focusOut)=\"deactivateEditor()\"\n      [ngModel]=\"html\"\n      formControlName=\"editorContent\"\n    ></ngx-editor>\n  </form>\n\n  <div\n    *ngIf=\"!active\"\n    (click)=\"activateEditor()\"\n    [innerHTML]=\"html | safeHtml\"\n  >\n  </div>\n\n  <div class=\"buttons\">\n    <app-icon-link (click)=\"onDeleteRichText()\" icon=\"delete\">\n      Delete Rich-Text\n    </app-icon-link>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "richText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "RichText",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteRichText",
                    "defaultValue": "new EventEmitter<RichText>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                },
                {
                    "name": "updateRichText",
                    "defaultValue": "new EventEmitter<RichText>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "editor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Editor | null",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    editorContent: new FormControl('', Validators.required()),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "html",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "toolbar",
                    "defaultValue": "[\n    ['bold', 'italic'],\n    ['underline', 'strike'],\n    ['code', 'blockquote'],\n    ['ordered_list', 'bullet_list'],\n    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],\n    ['text_color'],\n    ['horizontal_rule', 'format_clear'],\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Toolbar",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "activateEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deactivateEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRichText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { RichText } from './../widget';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Editor, Toolbar, Validators } from 'ngx-editor';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-rich-text',\n  template: `\n    <div class=\"richt-text-widget\" *ngIf=\"editor\">\n      <form [formGroup]=\"form\" *ngIf=\"active\">\n        <ngx-editor-menu\n         [editor]=\"editor\"\n         [toolbar] = \"toolbar\"\n        ></ngx-editor-menu>\n        <ngx-editor\n          [editor]=\"editor\"\n          (focusOut)=\"deactivateEditor()\"\n          [ngModel]=\"html\"\n          formControlName=\"editorContent\"\n        ></ngx-editor>\n      </form>\n\n      <div\n        *ngIf=\"!active\"\n        (click)=\"activateEditor()\"\n        [innerHTML]=\"html | safeHtml\"\n      >\n      </div>\n\n      <div class=\"buttons\">\n        <app-icon-link (click)=\"onDeleteRichText()\" icon=\"delete\">\n          Delete Rich-Text\n        </app-icon-link>\n      </div>\n    </div>\n  `,\n  styles: [\n    '.buttons { display: flex; justify-content: flex-end; margin-top: 1rem; }',\n  ],\n})\nexport class RichTextComponent implements OnInit, OnDestroy {\n  @Input() richText!: RichText;\n  @Output() updateRichText = new EventEmitter<RichText>();\n  @Output() deleteRichText = new EventEmitter<RichText>();\n  active: boolean = false;\n  editor: Editor | null = null;\n  html: string = '';\n\n  toolbar: Toolbar = [\n    ['bold', 'italic'],\n    ['underline', 'strike'],\n    ['code', 'blockquote'],\n    ['ordered_list', 'bullet_list'],\n    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],\n    ['text_color'],\n    ['horizontal_rule', 'format_clear'],\n  ];\n\n  form = new FormGroup({\n    editorContent: new FormControl('', Validators.required()),\n  });\n\n  ngOnInit(): void {\n    this.editor = new Editor();\n    this.html = this.richText.html;\n  }\n\n  ngOnDestroy(): void {\n    this.editor?.destroy();\n  }\n\n  activateEditor(): void {\n    this.active = true;\n\n    setTimeout(() => {\n      this.editor?.commands\n        .focus()\n        .exec();\n    })\n  }\n\n  onDeleteRichText(): void {\n    this.deleteRichText.emit(this.richText);\n  }\n\n  deactivateEditor(): void {\n    this.active = false;\n    this.html = this.form.value.editorContent || '';\n\n    this.updateRichText.emit({\n      ...this.richText,\n      html: this.html,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".buttons { display: flex; justify-content: flex-end; margin-top: 1rem; }\n",
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "WidgetComponent",
            "id": "component-WidgetComponent-cb8b3a0f6273eb67e281308ad04dc6eb440023df4a67697a72d97906709720634a7a0d7bbeb5bc9e8da37f416344b8631db31cc8a412e0915db666b507a028b6",
            "file": "src/app/widget/widget/widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-widget",
            "styleUrls": [],
            "styles": [
                ".mat-divider { margin: 1rem 0 }"
            ],
            "template": "<div>\n  <mat-divider></mat-divider>\n  <app-checklist\n    *ngIf=\"widget.type == WidgetTypes.CHECKLIST\"\n    [checklist]=\"widget\"\n    (updateChecklist)=\"onUpdateWidget($event)\"\n    (deleteChecklist)=\"onDeleteWidget($event)\"\n  ></app-checklist>\n\n  <app-rich-text\n    *ngIf=\"widget.type == WidgetTypes.RICH_TEXT\"\n    [richText]=\"widget\"\n    (updateRichText)=\"onUpdateWidget($event)\"\n    (deleteRichText)=\"onDeleteWidget($event)\"\n  ></app-rich-text>\n\n  <app-link\n    *ngIf=\"widget.type == WidgetTypes.LINK\"\n    [link]=\"widget\"\n    (updateLink)=\"onUpdateWidget($event)\"\n    (deleteLink)=\"onDeleteWidget($event)\"\n  ></app-link>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "ExistingNote",
                    "decorators": []
                },
                {
                    "name": "widget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Widget",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "WidgetTypes",
                    "defaultValue": "WidgetTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "onDeleteWidget",
                    "args": [
                        {
                            "name": "deleteWidget",
                            "type": "Widget",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "deleteWidget",
                            "type": "Widget",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdateWidget",
                    "args": [
                        {
                            "name": "updatedWidget",
                            "type": "Widget",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updatedWidget",
                            "type": "Widget",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ExistingNote } from './../../note/note';\nimport { Widget, Widgets, WidgetTypes } from './../widget';\nimport { NotesService } from './../../notes.service';\n\n@Component({\n  selector: 'app-widget',\n  template: `\n    <div>\n      <mat-divider></mat-divider>\n      <app-checklist\n        *ngIf=\"widget.type == WidgetTypes.CHECKLIST\"\n        [checklist]=\"widget\"\n        (updateChecklist)=\"onUpdateWidget($event)\"\n        (deleteChecklist)=\"onDeleteWidget($event)\"\n      ></app-checklist>\n\n      <app-rich-text\n        *ngIf=\"widget.type == WidgetTypes.RICH_TEXT\"\n        [richText]=\"widget\"\n        (updateRichText)=\"onUpdateWidget($event)\"\n        (deleteRichText)=\"onDeleteWidget($event)\"\n      ></app-rich-text>\n\n      <app-link\n        *ngIf=\"widget.type == WidgetTypes.LINK\"\n        [link]=\"widget\"\n        (updateLink)=\"onUpdateWidget($event)\"\n        (deleteLink)=\"onDeleteWidget($event)\"\n      ></app-link>\n    </div>\n  `,\n  styles: [\n    '.mat-divider { margin: 1rem 0 }',\n  ],\n})\nexport class WidgetComponent {\n  @Input() widget!: Widget;\n  @Input() note!: ExistingNote;\n  WidgetTypes = WidgetTypes;\n\n  constructor(private notesService: NotesService) { }\n\n  onUpdateWidget(updatedWidget: Widget): void {\n    const widgets: Widgets | [] = this.note.widgets || [];\n    const updatedWidgets: Widgets = widgets.map((widget) => (\n      widget.id === updatedWidget.id ? updatedWidget : widget\n    ));\n    this.notesService.updateWidgets(this.note.id, updatedWidgets);\n  }\n\n  onDeleteWidget(deleteWidget: Widget): void {\n    const widgets: Widgets | [] = this.note.widgets || [];\n    const updatedWidgets: Widgets = widgets.filter((widget) => (\n      widget.id !== deleteWidget.id\n    ));\n    this.notesService.updateWidgets(this.note.id, updatedWidgets);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ".mat-divider { margin: 1rem 0 }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notesService",
                        "type": "NotesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "notesService",
                        "type": "NotesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ff8bf9393cefd88c2a8930635e704b8e56e3144746aa26b8b8a94c2969c41b78d276d11914b2ff360188573b26d6678c02198ed782813cf40bb33aa394abed67",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { NgxEditorModule } from 'ngx-editor';\n\nimport { AppComponent } from './app.component';\nimport { NoteComponent } from './note/note.component';\nimport { NoteDialogComponent } from './note-dialog/note-dialog.component';\nimport { initializeApp,provideFirebaseApp } from '@angular/fire/app';\nimport { environment } from '../environments/environment';\nimport { provideFirestore, getFirestore } from '@angular/fire/firestore';\nimport { NoteMenuComponent } from './note-menu/note-menu.component';\nimport { ChecklistComponent } from './widget/checklist/checklist.component';\nimport { WidgetComponent } from './widget/widget/widget.component';\nimport { CheckboxComponent } from './widget/checkbox/checkbox.component';\nimport { RichTextComponent } from './widget/rich-text/rich-text.component';\nimport { IconLinkComponent } from './icon-link/icon-link.component';\nimport { SafeHtmlPipe } from './safe-html.pipe';\nimport { LinkComponent } from './widget/link/link.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NoteComponent,\n    NoteDialogComponent,\n    NoteMenuComponent,\n    ChecklistComponent,\n    WidgetComponent,\n    CheckboxComponent,\n    RichTextComponent,\n    IconLinkComponent,\n    SafeHtmlPipe,\n    LinkComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatInputModule,\n    MatMenuModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    NgxEditorModule,\n    provideFirebaseApp(() => initializeApp(environment.firebase)),\n    provideFirestore(() => getFirestore()),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ChecklistComponent"
                        },
                        {
                            "name": "IconLinkComponent"
                        },
                        {
                            "name": "LinkComponent"
                        },
                        {
                            "name": "NoteComponent"
                        },
                        {
                            "name": "NoteDialogComponent"
                        },
                        {
                            "name": "NoteMenuComponent"
                        },
                        {
                            "name": "RichTextComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        },
                        {
                            "name": "WidgetComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "provideFirebaseApp(() => initializeApp(environment"
                        },
                        {
                            "name": "provideFirestore(() => getFirestore())"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  firebase: {\n    projectId: 'notes-19e83',\n    appId: '1:282833814871:web:08b9cc5943e5a4a9882a12',\n    databaseURL: 'https://notes-19e83-default-rtdb.europe-west1.firebasedatabase.app',\n    storageBucket: 'notes-19e83.appspot.com',\n    locationId: 'europe-west6',\n    apiKey: 'AIzaSyBLBAY1W7Mpc305F5EsAGK_jelLA3yQVS4',\n    authDomain: 'notes-19e83.firebaseapp.com',\n    messagingSenderId: '282833814871',\n  },\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  firebase: {\n    projectId: 'notes-19e83',\n    appId: '1:282833814871:web:08b9cc5943e5a4a9882a12',\n    databaseURL: 'https://notes-19e83-default-rtdb.europe-west1.firebasedatabase.app',\n    storageBucket: 'notes-19e83.appspot.com',\n    locationId: 'europe-west6',\n    apiKey: 'AIzaSyBLBAY1W7Mpc305F5EsAGK_jelLA3yQVS4',\n    authDomain: 'notes-19e83.firebaseapp.com',\n    messagingSenderId: '282833814871',\n  },\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Widget",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/widget/widget.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "Widgets",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Widget[]",
                "file": "src/app/widget/widget.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            }
        ],
        "enumerations": [
            {
                "name": "WidgetTypes",
                "childs": [
                    {
                        "name": "CHECKLIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "checklist"
                    },
                    {
                        "name": "RICH_TEXT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "richText"
                    },
                    {
                        "name": "LINK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "link"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/widget/widget.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  firebase: {\n    projectId: 'notes-19e83',\n    appId: '1:282833814871:web:08b9cc5943e5a4a9882a12',\n    databaseURL: 'https://notes-19e83-default-rtdb.europe-west1.firebasedatabase.app',\n    storageBucket: 'notes-19e83.appspot.com',\n    locationId: 'europe-west6',\n    apiKey: 'AIzaSyBLBAY1W7Mpc305F5EsAGK_jelLA3yQVS4',\n    authDomain: 'notes-19e83.firebaseapp.com',\n    messagingSenderId: '282833814871',\n  },\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  firebase: {\n    projectId: 'notes-19e83',\n    appId: '1:282833814871:web:08b9cc5943e5a4a9882a12',\n    databaseURL: 'https://notes-19e83-default-rtdb.europe-west1.firebasedatabase.app',\n    storageBucket: 'notes-19e83.appspot.com',\n    locationId: 'europe-west6',\n    apiKey: 'AIzaSyBLBAY1W7Mpc305F5EsAGK_jelLA3yQVS4',\n    authDomain: 'notes-19e83.firebaseapp.com',\n    messagingSenderId: '282833814871',\n  },\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/widget/widget.ts": [
                {
                    "name": "WidgetTypes",
                    "childs": [
                        {
                            "name": "CHECKLIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "checklist"
                        },
                        {
                            "name": "RICH_TEXT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "richText"
                        },
                        {
                            "name": "LINK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "link"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/widget/widget.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/widget/widget.ts": [
                {
                    "name": "Widget",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/widget/widget.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "Widgets",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Widget[]",
                    "file": "src/app/widget/widget.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/icon-link/icon-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/note-dialog/note-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/note-dialog/note-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NoteDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/note-dialog/note-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NoteDialogResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/note-menu/note-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoteMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/note/note.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/note/note.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExistingNote",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/note/note.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Note",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/notes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotesService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/safe-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/checklist/checklist.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChecklistComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/rich-text/rich-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RichTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/widget.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Checklist",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/widget.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChecklistItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/widget.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/widget.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RichText",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/widget/widget/widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}